package com.app.FlightSystem.Controller;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.app.FlightSystem.Service.FlightService;
import com.app.FlightSystem.model.Flight;

@RestController
@RequestMapping("/flights")
public class FlightController {
	 
	 private final FlightService flightService;

	  public FlightController(FlightService flightService) {
		  this.flightService = flightService;
	  }
	  
	  @GetMapping("/allflights")
	    public List<Flight> getAllFlights() {
	        return flightService.getAllFlights();
	    }

	    @GetMapping("/search")
	    public ResponseEntity<List<Flight>> findFlightsbySourceAndDestination(@RequestParam(required = false) String sourceLocation, @RequestParam(required = false) String destination, @RequestParam(required = false) @DateTimeFormat(iso=DateTimeFormat.ISO.DATE)LocalDate departureDate) {
	        List<Flight> flights= flightService.searchFlights(sourceLocation, destination, departureDate);
	        return flights.isEmpty() ? ResponseEntity.notFound().build() : ResponseEntity.ok(flights);
	    }

	    @GetMapping("/{id}")
	    public ResponseEntity<Flight> getFlightByIdAndDepartureDate(@PathVariable String id,@RequestParam @DateTimeFormat(iso=DateTimeFormat.ISO.DATE)LocalDate departureDate) {
	        Flight flight= flightService.getFlightbyId(id,departureDate);
	    	return (flight!=null)?ResponseEntity.ok(flight):ResponseEntity.notFound().build();
	    }

	   @PostMapping("/add")
	    public Flight addFlight(@RequestBody Flight flight) {
	        return flightService.addFlight(flight);
	    }
	   @PutMapping("/update/{id}")
	    public Flight updateFlight(@PathVariable String id, @RequestBody Flight updatedFlight) {
	        return flightService.updateFlight(id, updatedFlight);
	    }
	    
	    //partialUpdate
	    @PatchMapping("/update/{id}")
	    public ResponseEntity<Flight> updateFlightFields(
	            @PathVariable String id,
	            @RequestBody Map<String, Object> updates) {
	        
	        Flight updatedFlight = flightService.updateFlightFields(id, updates);
	        
	        return (updatedFlight != null) ? ResponseEntity.ok(updatedFlight) : ResponseEntity.notFound().build();
	    }
	    
	    //delete
	    @DeleteMapping("/delete/{id}")
	    public String deleteFlight(@PathVariable String id) {
	        boolean isDeleted = flightService.deleteFlight(id);
	        return isDeleted ? "Flight deleted successfully." : "Flight not found.";
	    }

}
