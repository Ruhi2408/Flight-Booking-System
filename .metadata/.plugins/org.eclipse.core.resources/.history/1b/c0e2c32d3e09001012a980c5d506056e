package com.app.FlightSystem.Service;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.FlightSystem.model.Flight;
import com.app.FlightSystem.repository.FlightRepository;

@Service
public class FlightService {
	@Autowired
	private FlightRepository flightRepository;
	public FlightService(FlightRepository searchRepository) {
        this.flightRepository = searchRepository;
    }
	
	public List<Flight> searchFlights(String sourceLocation, String destination,LocalDate departureDate){
		return flightRepository.findBySourceLocationAndDestinationAndDepartureDate(sourceLocation, destination, departureDate);
	}
	public Flight getFlightbyId(String id,LocalDate departureDate) {
		return flightRepository.getFlightByIdAndDepartureDate(id, departureDate);
	}
	
	public Flight addFlight(Flight flight) {
		return flightRepository.save(flight);
	}

	public List<Flight> getAllFlights() {
		
		 return flightRepository.findAll();
	}
	public Flight updateFlight(String id, Flight updatedFlight) {
        Optional<Flight> existingFlightOpt = flightRepository.findById(id);

        if (existingFlightOpt.isPresent()) {
            Flight existingFlight = existingFlightOpt.get();
            existingFlight.setAirlines(updatedFlight.getAirlines());
            existingFlight.setSourceLocation(updatedFlight.getSourceLocation());
            existingFlight.setDestination(updatedFlight.getDestination());
            existingFlight.setDepartureDate(updatedFlight.getDepartureDate());
            existingFlight.setDepartureTime(updatedFlight.getDepartureTime());
            existingFlight.setArrivalTime(updatedFlight.getArrivalTime());
            existingFlight.setPrice(updatedFlight.getPrice());
            existingFlight.setTotal_seats(updatedFlight.getTotal_seats());

            return flightRepository.save(existingFlight);
        }
        return null;
    }
    
    //partialUpdate
    public Flight updateFlightFields(String id, Map<String, Object> updates) {
        Optional<Flight> existingFlightOpt = flightRepository.findById(id);

        if (existingFlightOpt.isPresent()) {
            Flight existingFlight = existingFlightOpt.get();

            // Manually update fields if they exist in the request
            if (updates.containsKey("airlines")) {
                existingFlight.setAirlines((String) updates.get("airlines"));
            }
            
            if (updates.containsKey("sourceLocation")) {
                existingFlight.setSourceLocation((String) updates.get("sourceLocation"));
            }
            if (updates.containsKey("destination")) {
                existingFlight.setDestination((String) updates.get("destination"));
            }
            if (updates.containsKey("departureDate")) {
                existingFlight.setDepartureDate(LocalDate.parse(updates.get("departureDateDate").toString()));
            }
            if (updates.containsKey("departureTime")) {
                existingFlight.setDepartureTime(LocalTime.parse(updates.get("departureTime").toString()));
            }
            if (updates.containsKey("arrivalTime")) {
                existingFlight.setArrivalTime(LocalTime.parse(updates.get("arrivalTime").toString()));
            }
            if (updates.containsKey("price")) {
                existingFlight.setPrice(Double.parseDouble(updates.get("price").toString()));
            }
            if (updates.containsKey("seatsAvailable")) {
                existingFlight.setTotal_seats(Integer.parseInt(updates.get("total_seats").toString()));
            }

            return flightRepository.save(existingFlight);
        }
        return null;
    }
    
    //delete flight by admin
    public boolean deleteFlight(String id) {
        if (flightRepository.existsById(id)) {
            flightRepository.deleteById(id);
            return true;
        }
        return false;
    }
    
}



